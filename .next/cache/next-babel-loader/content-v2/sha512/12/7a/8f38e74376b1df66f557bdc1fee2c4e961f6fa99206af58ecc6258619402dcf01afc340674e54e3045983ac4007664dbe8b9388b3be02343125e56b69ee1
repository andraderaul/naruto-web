{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport api from '../services/api';\nimport { GET } from '../constants/verbs';\nimport { CHARACTERS, CHARACTERS_BY_ID } from '../constants/endpoints';\nexport function getCharacters() {\n  return _getCharacters.apply(this, arguments);\n}\n\nfunction _getCharacters() {\n  _getCharacters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _yield$api, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return api({\n              method: GET,\n              url: CHARACTERS\n            });\n\n          case 3:\n            _yield$api = _context.sent;\n            data = _yield$api.data.data;\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", []);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n  return _getCharacters.apply(this, arguments);\n}\n\nexport function getCharactersByParams(_x, _x2) {\n  return _getCharactersByParams.apply(this, arguments);\n}\n\nfunction _getCharactersByParams() {\n  _getCharactersByParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params, letter) {\n    var _yield$api2, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return api({\n              method: GET,\n              url: \"\".concat(CHARACTERS, \"?\").concat(params, \"=\").concat(letter)\n            });\n\n          case 3:\n            _yield$api2 = _context2.sent;\n            data = _yield$api2.data.data;\n            return _context2.abrupt(\"return\", data);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n\n            if (!(_context2.t0.code === 'ECONNREFUSED')) {\n              _context2.next = 14;\n              break;\n            }\n\n            console.error('Server is down');\n            _context2.next = 16;\n            break;\n\n          case 14:\n            console.error(_context2.t0);\n            throw _context2.t0;\n\n          case 16:\n            return _context2.abrupt(\"return\", []);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 8]]);\n  }));\n  return _getCharactersByParams.apply(this, arguments);\n}\n\nexport function getCharacterById(_x3) {\n  return _getCharacterById.apply(this, arguments);\n}\n\nfunction _getCharacterById() {\n  _getCharacterById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var _yield$api3, data;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return api({\n              method: GET,\n              url: CHARACTERS_BY_ID(id)\n            });\n\n          case 3:\n            _yield$api3 = _context3.sent;\n            data = _yield$api3.data;\n            return _context3.abrupt(\"return\", data);\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n            //TODO: throw error\n            console.log(_context3.t0);\n            return _context3.abrupt(\"return\", null);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 8]]);\n  }));\n  return _getCharacterById.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/howl/√Årea de Trabalho/my-projects/naruto/naruto-web/lib/characters.ts"],"names":["api","GET","CHARACTERS","CHARACTERS_BY_ID","getCharacters","method","url","data","getCharactersByParams","params","letter","code","console","error","getCharacterById","id","log"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AAEA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,wBAA7C;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIOJ,GAAG,CAAC;AACZK,cAAAA,MAAM,EAAEJ,GADI;AAEZK,cAAAA,GAAG,EAAEJ;AAFO,aAAD,CAJV;;AAAA;AAAA;AAGOK,YAAAA,IAHP,cAGDA,IAHC,CAGOA,IAHP;AAAA,6CAQIA,IARJ;;AAAA;AAAA;AAAA;AAAA,6CAUI,EAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,gBAAsBC,qBAAtB;AAAA;AAAA;;;oFAAO,kBACLC,MADK,EAELC,MAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOOV,GAAG,CAAC;AACZK,cAAAA,MAAM,EAAEJ,GADI;AAEZK,cAAAA,GAAG,YAAKJ,UAAL,cAAmBO,MAAnB,cAA6BC,MAA7B;AAFS,aAAD,CAPV;;AAAA;AAAA;AAMOH,YAAAA,IANP,eAMDA,IANC,CAMOA,IANP;AAAA,8CAYIA,IAZJ;;AAAA;AAAA;AAAA;;AAAA,kBAeC,aAAMI,IAAN,KAAe,cAfhB;AAAA;AAAA;AAAA;;AAgBDC,YAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd;AAhBC;AAAA;;AAAA;AAkBDD,YAAAA,OAAO,CAACC,KAAR;AAlBC;;AAAA;AAAA,8CAqBI,EArBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyBP,gBAAsBC,gBAAtB;AAAA;AAAA;;;+EAAO,kBAAgCC,EAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEoBf,GAAG,CAAC;AACzBK,cAAAA,MAAM,EAAEJ,GADiB;AAEzBK,cAAAA,GAAG,EAAEH,gBAAgB,CAACY,EAAD;AAFI,aAAD,CAFvB;;AAAA;AAAA;AAEKR,YAAAA,IAFL,eAEKA,IAFL;AAAA,8CAMIA,IANJ;;AAAA;AAAA;AAAA;AAQH;AACAK,YAAAA,OAAO,CAACI,GAAR;AATG,8CAUI,IAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import api from '../services/api';\nimport ICharacter from '../interfaces/character';\nimport { GET } from '../constants/verbs';\nimport { CHARACTERS, CHARACTERS_BY_ID } from '../constants/endpoints';\n\nexport async function getCharacters(): Promise<ICharacter[]> {\n  try {\n    const {\n      data: { data },\n    } = await api({\n      method: GET,\n      url: CHARACTERS,\n    });\n    return data;\n  } catch (error) {\n    return [];\n  }\n}\n\nexport async function getCharactersByParams(\n  params: string,\n  letter: string,\n): Promise<ICharacter[]> {\n  try {\n    const {\n      data: { data },\n    } = await api({\n      method: GET,\n      url: `${CHARACTERS}?${params}=${letter}`,\n    });\n\n    return data;\n  } catch (error) {\n    //TODO: throw error\n    if (error.code === 'ECONNREFUSED') {\n      console.error('Server is down');\n    } else {\n      console.error(error);\n      throw error;\n    }\n    return [];\n  }\n}\n\nexport async function getCharacterById(id: string): Promise<ICharacter | null> {\n  try {\n    const { data } = await api({\n      method: GET,\n      url: CHARACTERS_BY_ID(id),\n    });\n    return data;\n  } catch (error) {\n    //TODO: throw error\n    console.log(error);\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}