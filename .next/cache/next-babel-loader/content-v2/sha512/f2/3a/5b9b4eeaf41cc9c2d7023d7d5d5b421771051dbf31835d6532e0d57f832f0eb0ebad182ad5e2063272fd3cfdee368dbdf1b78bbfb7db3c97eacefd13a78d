{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/howl/\\xC1rea de Trabalho/my-projects/naruto/naruto-web/pages/characters.tsx\";\nimport { useState, useEffect } from 'react';\nimport useAsync, { RequestStatus } from '../hooks/useAsync';\nimport { useRouter } from 'next/router';\nimport { getCharactersByParams, getCharacters } from '../lib/characters';\nimport { CHARACTERS } from '../constants/endpoints';\nimport { LINKS } from '../constants/urls';\nimport Grid from '../components/Grid';\nimport Card from '../components/Card';\nimport Search from '../components/Search';\nimport Alphabet from '../components/Alphabet';\nimport LoadingSharingan from '../components/LoadingSharingan';\nexport async function getStaticProps() {\n  const data = await getCharacters();\n  return {\n    props: {\n      data\n    }\n  };\n}\n\nconst Characters = ({\n  data\n}) => {\n  const {\n    status,\n    error,\n    data: dataAsync,\n    runPromise\n  } = useAsync({\n    status: RequestStatus.RESOLVED,\n    data: data\n  });\n  const {\n    0: letter,\n    1: setLetter\n  } = useState('');\n  const router = useRouter();\n  useEffect(() => {\n    const {\n      query\n    } = router;\n\n    if (query.from) {\n      const {\n        from\n      } = query;\n      setLetter(from);\n      return runPromise(getCharactersByParams('from', from));\n    } else if (query.name) {\n      const {\n        name\n      } = query;\n      setLetter('');\n      return runPromise(getCharactersByParams('name', name));\n    }\n  }, [router]);\n\n  const RenderContent = () => {\n    switch (status) {\n      case RequestStatus.PENDING:\n        return /*#__PURE__*/_jsxDEV(LoadingSharingan, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, this);\n\n      case RequestStatus.RESOLVED:\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          children: (dataAsync === null || dataAsync === void 0 ? void 0 : dataAsync.length) === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Characters not found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this) : dataAsync === null || dataAsync === void 0 ? void 0 : dataAsync.map(item => /*#__PURE__*/_jsxDEV(Card, {\n            src: item.picture,\n            name: item.name,\n            id: item.id,\n            onClick: LINKS.character\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n\n      case RequestStatus.REJECTED:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: error === null || error === void 0 ? void 0 : error.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Unhandled status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 16\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      pathname: CHARACTERS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alphabet, {\n      letter: letter,\n      setLetter: setLetter,\n      pathname: CHARACTERS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RenderContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Characters;","map":{"version":3,"sources":["/home/howl/√Årea de Trabalho/my-projects/naruto/naruto-web/pages/characters.tsx"],"names":["useState","useEffect","useAsync","RequestStatus","useRouter","getCharactersByParams","getCharacters","CHARACTERS","LINKS","Grid","Card","Search","Alphabet","LoadingSharingan","getStaticProps","data","props","Characters","status","error","dataAsync","runPromise","RESOLVED","letter","setLetter","router","query","from","name","RenderContent","PENDING","length","map","item","picture","id","character","REJECTED","message"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport useAsync, { RequestStatus } from '../hooks/useAsync';\nimport { useRouter } from 'next/router';\nimport { getCharactersByParams, getCharacters } from '../lib/characters';\nimport ICharacter from '../interfaces/character';\nimport { CHARACTERS } from '../constants/endpoints';\nimport { LINKS } from '../constants/urls';\nimport Grid from '../components/Grid';\nimport Card from '../components/Card';\nimport Search from '../components/Search';\nimport Alphabet from '../components/Alphabet';\nimport LoadingSharingan from '../components/LoadingSharingan';\n\ninterface IPropsCharacter {\n  data: ICharacter[];\n}\n\nexport async function getStaticProps() {\n  const data = await getCharacters();\n  return {\n    props: {\n      data,\n    },\n  };\n}\n\nconst Characters: React.FC<IPropsCharacter> = ({ data }: IPropsCharacter) => {\n  const { status, error, data: dataAsync, runPromise } = useAsync({\n    status: RequestStatus.RESOLVED,\n    data: data,\n  });\n\n  const [letter, setLetter] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    const { query } = router;\n    if (query.from) {\n      const { from } = query;\n      setLetter(from as string);\n      return runPromise(getCharactersByParams('from', from as string));\n    } else if (query.name) {\n      const { name } = query;\n      setLetter('');\n      return runPromise(getCharactersByParams('name', name as string));\n    }\n  }, [router]);\n\n  const RenderContent = () => {\n    switch (status) {\n      case RequestStatus.PENDING:\n        return <LoadingSharingan />;\n      case RequestStatus.RESOLVED:\n        return (\n          <Grid>\n            {dataAsync?.length === 0 ? (\n              <div>Characters not found</div>\n            ) : (\n              dataAsync?.map((item) => (\n                <Card\n                  key={item.id}\n                  src={item.picture}\n                  name={item.name}\n                  id={item.id}\n                  onClick={LINKS.character}\n                />\n              ))\n            )}\n          </Grid>\n        );\n      case RequestStatus.REJECTED:\n        return <div>{error?.message}</div>;\n      default:\n        return <div>Unhandled status: {status}</div>;\n    }\n  };\n\n  return (\n    <>\n      <Search pathname={CHARACTERS} />\n      <Alphabet letter={letter} setLetter={setLetter} pathname={CHARACTERS} />\n      <RenderContent />\n    </>\n  );\n};\n\nexport default Characters;\n"]},"metadata":{},"sourceType":"module"}