{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/howl/\\xC1rea de Trabalho/my-projects/naruto/naruto-web/pages/characters.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport useAsync, { RequestStatus } from '../hooks/useAsync';\nimport { useRouter } from 'next/router';\nimport { getCharactersByParams } from '../lib/characters';\nimport { CHARACTERS } from '../constants/endpoints';\nimport { LINKS } from '../constants/urls';\nimport Grid from '../components/Grid';\nimport Card from '../components/Card';\nimport Search from '../components/Search';\nimport Alphabet from '../components/Alphabet';\nimport LoadingSharingan from '../components/LoadingSharingan';\n\nvar Characters = function Characters(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  var _useAsync = useAsync({\n    status: RequestStatus.RESOLVED,\n    data: data\n  }),\n      status = _useAsync.status,\n      error = _useAsync.error,\n      dataAsync = _useAsync.data,\n      runPromise = _useAsync.runPromise;\n\n  var _useState = useState(''),\n      letter = _useState[0],\n      setLetter = _useState[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    var query = router.query;\n\n    if (query.from) {\n      var from = query.from;\n      setLetter(from);\n      return runPromise(getCharactersByParams('from', from));\n    } else if (query.name) {\n      var name = query.name;\n      setLetter('');\n      return runPromise(getCharactersByParams('name', name));\n    }\n  }, [router]);\n\n  var RenderContent = function RenderContent() {\n    switch (status) {\n      case RequestStatus.PENDING:\n        return /*#__PURE__*/_jsxDEV(LoadingSharingan, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, _this);\n\n      case RequestStatus.RESOLVED:\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          children: (dataAsync === null || dataAsync === void 0 ? void 0 : dataAsync.length) === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Characters not found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, _this) : dataAsync === null || dataAsync === void 0 ? void 0 : dataAsync.map(function (item) {\n            return /*#__PURE__*/_jsxDEV(Card, {\n              src: item.picture,\n              name: item.name,\n              id: item.id,\n              onClick: LINKS.character\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, _this);\n\n      case RequestStatus.REJECTED:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: error === null || error === void 0 ? void 0 : error.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }, _this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Unhandled status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 16\n        }, _this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      pathname: CHARACTERS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Alphabet, {\n      letter: letter,\n      setLetter: setLetter,\n      pathname: CHARACTERS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(RenderContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Characters, \"MZbiCz596zERL051xJdBxtA2P1M=\", false, function () {\n  return [useAsync, useRouter];\n});\n\n_c = Characters;\nexport var __N_SSG = true;\nexport default Characters;\n\nvar _c;\n\n$RefreshReg$(_c, \"Characters\");","map":{"version":3,"sources":["/home/howl/√Årea de Trabalho/my-projects/naruto/naruto-web/pages/characters.tsx"],"names":["useState","useEffect","useAsync","RequestStatus","useRouter","getCharactersByParams","CHARACTERS","LINKS","Grid","Card","Search","Alphabet","LoadingSharingan","Characters","data","status","RESOLVED","error","dataAsync","runPromise","letter","setLetter","router","query","from","name","RenderContent","PENDING","length","map","item","picture","id","character","REJECTED","message"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,IAAmBC,aAAnB,QAAwC,mBAAxC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,qBAAT,QAAqD,mBAArD;AAEA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;;AAeA,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAA+B;AAAA;;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;;AAAA,kBACpBZ,QAAQ,CAAC;AAC9Da,IAAAA,MAAM,EAAEZ,aAAa,CAACa,QADwC;AAE9DF,IAAAA,IAAI,EAAEA;AAFwD,GAAD,CADY;AAAA,MACnEC,MADmE,aACnEA,MADmE;AAAA,MAC3DE,KAD2D,aAC3DA,KAD2D;AAAA,MAC9CC,SAD8C,aACpDJ,IADoD;AAAA,MACnCK,UADmC,aACnCA,UADmC;;AAAA,kBAM/CnB,QAAQ,CAAC,EAAD,CANuC;AAAA,MAMpEoB,MANoE;AAAA,MAM5DC,SAN4D;;AAO3E,MAAMC,MAAM,GAAGlB,SAAS,EAAxB;AAEAH,EAAAA,SAAS,CAAC,YAAM;AAAA,QACNsB,KADM,GACID,MADJ,CACNC,KADM;;AAEd,QAAIA,KAAK,CAACC,IAAV,EAAgB;AAAA,UACNA,IADM,GACGD,KADH,CACNC,IADM;AAEdH,MAAAA,SAAS,CAACG,IAAD,CAAT;AACA,aAAOL,UAAU,CAACd,qBAAqB,CAAC,MAAD,EAASmB,IAAT,CAAtB,CAAjB;AACD,KAJD,MAIO,IAAID,KAAK,CAACE,IAAV,EAAgB;AAAA,UACbA,IADa,GACJF,KADI,CACbE,IADa;AAErBJ,MAAAA,SAAS,CAAC,EAAD,CAAT;AACA,aAAOF,UAAU,CAACd,qBAAqB,CAAC,MAAD,EAASoB,IAAT,CAAtB,CAAjB;AACD;AACF,GAXQ,EAWN,CAACH,MAAD,CAXM,CAAT;;AAaA,MAAMI,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,YAAQX,MAAR;AACE,WAAKZ,aAAa,CAACwB,OAAnB;AACE,4BAAO,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,iBAAP;;AACF,WAAKxB,aAAa,CAACa,QAAnB;AACE,4BACE,QAAC,IAAD;AAAA,oBACG,CAAAE,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEU,MAAX,MAAsB,CAAtB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,GAGCV,SAHD,aAGCA,SAHD,uBAGCA,SAAS,CAAEW,GAAX,CAAe,UAACC,IAAD;AAAA,gCACb,QAAC,IAAD;AAEE,cAAA,GAAG,EAAEA,IAAI,CAACC,OAFZ;AAGE,cAAA,IAAI,EAAED,IAAI,CAACL,IAHb;AAIE,cAAA,EAAE,EAAEK,IAAI,CAACE,EAJX;AAKE,cAAA,OAAO,EAAEzB,KAAK,CAAC0B;AALjB,eACOH,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA,qBADa;AAAA,WAAf;AAJJ;AAAA;AAAA;AAAA;AAAA,iBADF;;AAiBF,WAAK7B,aAAa,CAAC+B,QAAnB;AACE,4BAAO;AAAA,oBAAMjB,KAAN,aAAMA,KAAN,uBAAMA,KAAK,CAAEkB;AAAb;AAAA;AAAA;AAAA;AAAA,iBAAP;;AACF;AACE,4BAAO;AAAA,2CAAwBpB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AAxBJ;AA0BD,GA3BD;;AA6BA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAET;AAAlB;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAEc,MAAlB;AAA0B,MAAA,SAAS,EAAEC,SAArC;AAAgD,MAAA,QAAQ,EAAEf;AAA1D;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAHF;AAAA,kBADF;AAOD,CA1DD;;GAAMO,U;UACmDX,Q,EAMxCE,S;;;KAPXS,U;;AA4DN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport useAsync, { RequestStatus } from '../hooks/useAsync';\nimport { useRouter } from 'next/router';\nimport { getCharactersByParams, getCharacters } from '../lib/characters';\nimport ICharacter from '../interfaces/character';\nimport { CHARACTERS } from '../constants/endpoints';\nimport { LINKS } from '../constants/urls';\nimport Grid from '../components/Grid';\nimport Card from '../components/Card';\nimport Search from '../components/Search';\nimport Alphabet from '../components/Alphabet';\nimport LoadingSharingan from '../components/LoadingSharingan';\n\ninterface IPropsCharacter {\n  data: ICharacter[];\n}\n\nexport async function getStaticProps() {\n  const data = await getCharacters();\n  return {\n    props: {\n      data,\n    },\n  };\n}\n\nconst Characters: React.FC<IPropsCharacter> = ({ data }: IPropsCharacter) => {\n  const { status, error, data: dataAsync, runPromise } = useAsync({\n    status: RequestStatus.RESOLVED,\n    data: data,\n  });\n\n  const [letter, setLetter] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    const { query } = router;\n    if (query.from) {\n      const { from } = query;\n      setLetter(from as string);\n      return runPromise(getCharactersByParams('from', from as string));\n    } else if (query.name) {\n      const { name } = query;\n      setLetter('');\n      return runPromise(getCharactersByParams('name', name as string));\n    }\n  }, [router]);\n\n  const RenderContent = () => {\n    switch (status) {\n      case RequestStatus.PENDING:\n        return <LoadingSharingan />;\n      case RequestStatus.RESOLVED:\n        return (\n          <Grid>\n            {dataAsync?.length === 0 ? (\n              <div>Characters not found</div>\n            ) : (\n              dataAsync?.map((item) => (\n                <Card\n                  key={item.id}\n                  src={item.picture}\n                  name={item.name}\n                  id={item.id}\n                  onClick={LINKS.character}\n                />\n              ))\n            )}\n          </Grid>\n        );\n      case RequestStatus.REJECTED:\n        return <div>{error?.message}</div>;\n      default:\n        return <div>Unhandled status: {status}</div>;\n    }\n  };\n\n  return (\n    <>\n      <Search pathname={CHARACTERS} />\n      <Alphabet letter={letter} setLetter={setLetter} pathname={CHARACTERS} />\n      <RenderContent />\n    </>\n  );\n};\n\nexport default Characters;\n"]},"metadata":{},"sourceType":"module"}